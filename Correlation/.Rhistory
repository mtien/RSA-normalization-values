wd()
wd
n0 <- 1 # initial number of individuals
n0 <- 1 # initial number of individuals
source('~/Winter13/EvoBioMol/HW/HW1/expgrowth.R')
c(length(end.res[end.res==0]))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
TEMP
source('~/.active-rstudio-document')
TEMP
source('~/.active-rstudio-document')
TEMP
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
t<-1:100
k<-0.1
plot(t, exp(k*t), type="l", col="red", xlab="Time (s)", ylab="Amount")
source('~/Winter13/EvoBioMol/HW/HW2/Script_2.R')
source('~/Winter13/EvoBioMol/HW/HW2/Script_2.R')
JCCorr(.25, 4)
PoisCorr(.25)
JCCorr((8/3)/18, 4)
JCCorr((7/3)/6, 4)
JCCorr((8/3)/18, 4)/JCCorr((7/3)/6, 4)
JCCorr((.0292), 4)
JCCorr(.548, 4)
gamma(shape=1)
pgamma(4,shape=1)
plot(pgamma(4,1))
plot(pgamma(c(0:100),1))
plot(gamma(c(0:100),1))
plot(gamma(c(0:100),1,1))
plot(gamma(1))
x<- seq(0.000001,1000, length=1000000000000000)
plot(qgamma(c(0:100),1))
plot(pgamma(c(0:100),1))
plot(rgamma(100,1))
plot(rgamma(1,1))
plot(dgamma(100,1))
plot(qgamma(100,1))
plot(pgamma(c(0:100),1))
plot(dgamma(c(0:100),1))
plot(dgamma(c(0:100),1), type='l')
plot(dgamma(c(0:100),.361), type='l',)
plot(dgamma(c(0:100),.361), type='l', ylab='Probability', xlab='X-value')
plot(dgamma(c(0:10),.361), type='l', ylab='Probability', xlab='X-value')
f<-.5*dbeta(2,4)
f<-.5*dbeta(seq(0,1,1000),2,4)
f<-.5*dbeta(seq(0,1,by=.001),2,4)
f<-.5*dbeta(seq(0,1,by=.001),2,4)+ .5*dbeta(seq(0,1,by=.001),4,2)
plot(seq(0,1,by.001),f)
plot(seq(0,1,by=.001),f)
plot(seq(0,1,by=.001),dnorm(seq(0,1,by=.001),.5,.25))
plot(seq(0,1,by=.001),dBin(seq(0,1,by=.001),1000,.5))
plot(seq(0,1,by=.001),dbin(seq(0,1,by=.001),1000,.5))
plot(seq(0,1,by=.001),dbinom(seq(0,1,by=.001),1000,.5))
plot(seq(0,1,by=.001),dnorm(seq(0,1,by=.001),.5,.25))
plot(seq(0,1,by=.001),dnorm(seq(0,1,by=.001),10,10))
plot(seq(0,1,by=.001),dbeta(seq(0,1,by=.001),10,10))
plot(seq(0,1,by=.001),dbeta(seq(0,1,by=.001),9,9))
plot(seq(0,1,by=.001),dbeta(seq(0,1,by=.001),5,5))
plot(seq(0,1,by=.001),dnorm(seq(0,1,by=.001),.5,.25))
plot(seq(0,1,by=.001),dnorm(seq(0,1,by=.001),.5,.15))
plot(seq(0,1,by=.001),dnorm(seq(0,1,by=.001),.5,.10))
plot(seq(0,1,by=.001),dbeta(seq(0,1,by=.001),9,9))
plot(seq(0,1,by=.001),dbeta(seq(0,1,by=.001),10,10))
plot(seq(0,1,by=.001),dbeta(seq(0,1,by=.001),10,10+1))
plot(seq(0,1,by=.001),dbeta(seq(0,1,by=.001),10,10+10))
plot(seq(0,1,by=.001),dbeta(seq(0,1,by=.001),10,10))
points(seq(0,1,by=.001),dbeta(seq(0,1,by=.001),10,10+10), col="red")
points(seq(0,1,by=.001),dbeta(seq(0,1,by=.001),10,10+1), col="blue")
points(seq(0,1,by=.001),dbeta(seq(0,1,by=.001),10,10+50), col="blue")
points(seq(0,1,by=.001),dbeta(seq(0,1,by=.001),10,10+50), col="green")
points(seq(0,1,by=.001),dbeta(seq(0,1,by=.001),10,10+100), col="purple")
plot(seq(0,1,by=.001),dbeta(seq(0,1,by=.001),10,10+100), col="purple")
plot(seq(0,1,by=.001),dbeta(seq(0,1,by=.001),10,10+100), col="purple", xaxis="proportion of heads", yaxis="density")
plot(seq(0,1,by=.001),dbeta(seq(0,1,by=.001),10,10+100), col="purple", xlab="proportion of heads", ylab="density")
points(seq(0,1,by=.001),dbeta(seq(0,1,by=.001),10,10+50), col="blue")
points(seq(0,1,by=.001),dbeta(seq(0,1,by=.001),10,10+10), col="green")
points(seq(0,1,by=.001),dbeta(seq(0,1,by=.001),10,10+1), col="red")
plot(seq(0,1,by=.001),dbeta(seq(0,1,by=.001),10+53,10+100-53), col="purple", xaxis="proportion of heads", yaxis="density")
points(seq(0,1,by=.001),dbeta(seq(0,1,by=.001),10+26,10+50-26), col="blue")
points(seq(0,1,by=.001),dbeta(seq(0,1,by=.001),10+8,10-8+10), col="green")
points(seq(0,1,by=.001),dbeta(seq(0,1,by=.001),10+1,10+1+1), col="red")
points(seq(0,1,by=.001),dbeta(seq(0,1,by=.001),10,10), col="black")
plot(seq(0,1,by=.001),dbeta(seq(0,1,by=.001),10+53,10+100-53), col="purple", xlab="proportion of heads", ylab="density")
points(seq(0,1,by=.001),dbeta(seq(0,1,by=.001),10+26,10+50-26), col="blue")
points(seq(0,1,by=.001),dbeta(seq(0,1,by=.001),10+8,10-8+10), col="green")
points(seq(0,1,by=.001),dbeta(seq(0,1,by=.001),10+1,10+1+1), col="red")
points(seq(0,1,by=.001),dbeta(seq(0,1,by=.001),10,10), col="black")
integrate(function(x^115*(1-x)^104), 0, 1)*choose(101,53)*gamma(100)*(1/gamma(62))*(1/gamma(57))
integrate(function(x){x^115*(1-x)^104)}, 0, 1)*choose(101,53)*gamma(100)*(1/gamma(62))*(1/gamma(57))
integrate(function(x){x^115*(1-x)^104}, lower=0, upper=1)*choose(101,53)*gamma(100)*(1/gamma(62))*(1/gamma(57))
f<-function(x){x^115*(1-x)^104}
integrate(f, lower=0, upper=1)*choose(101,53)*gamma(100)*(1/gamma(62))*(1/gamma(57))
integrate(f, lower=0, upper=1)
choose(101,53)
integrate(f, lower=0, upper=1)*choose(101,53)
integrate(f, lower=0, upper=1)[1]*choose(101,53)
integrate(f, lower=0, upper=1)[value]*choose(101,53)
integrate(f, lower=0, upper=1).value*choose(101,53)
integrate(f, lower=0, upper=1).value
integrate(f, lower=0, upper=1)[0]
integrate(f, lower=0, upper=1)[1]
integrate(f, lower=0, upper=1)[1]$value
integrate(f, lower=0, upper=1)[1]$value*choose(101,53)*gamma(100)*(1/gamma(62))*(1/gamma(57))
gamma(100)
gamma(100)/(gamma(63)*gamma(57))
dbeta(1,63,57)
dbeta(0,63,57)
f
integrate(f, lower=0, upper=1)[1]$value*choose(101,54)*gamma(110)*(1/gamma(62))*(1/gamma(57))
integrate(f, lower=0, upper=1)[1]$value*choose(101,54)*gamma(110)*(1/gamma(63))*(1/gamma(57))
integrate(f, lower=0, upper=1)[1]$value*choose(101,54)*gamma(120)*(1/gamma(63))*(1/gamma(57))
f<-function(x){x^62*(1-x)^57}
integrate(f, lower=0, upper=1)[1]$value*gamma(120)*(1/gamma(63))*(1/gamma(57))
plot(seq(0,1,by=.001),dbeta(seq(0,1,by=.001),10+53,10+100-53), col="purple", xlab="proportion of heads", ylab="density")
points(seq(0,1,by=.001),dbeta(seq(0,1,by=.001),10+26,10+50-26), col="blue")
points(seq(0,1,by=.001),dbeta(seq(0,1,by=.001),10+8,10-8+10), col="green")
points(seq(0,1,by=.001),dbeta(seq(0,1,by=.001),10+1,10-1+1), col="red")
points(seq(0,1,by=.001),dbeta(seq(0,1,by=.001),10,10), col="black")
a1<-2
b1<-4
a2<-4
b2<-2
n100<-.5*dbeta(seq(0,1,by=.001),a1+53,b1+100-53)+.5*dbeta(seq(0,1,by=.001),a2+53,b2+100-53)
n50<-.5*dbeta(seq(0,1,by=.001),a1+26,b1+50-26)+.5*dbeta(seq(0,1,by=.001),a2+26,b2+50-26)
n10<-.5*dbeta(seq(0,1,by=.001),a1+8,b1+10-8)+.5*dbeta(seq(0,1,by=.001),a2+8,b2+10-8)
n1<-.5*dbeta(seq(0,1,by=.001),a1+1,b1+1-1)+.5*dbeta(seq(0,1,by=.001),a2+1,b2+1-1)
plot(seq(0,1,by=.001),dbeta(seq(0,1,by=.001),10+53,10+100-53), col="purple", xlab="proportion of heads", ylab="density")
points(seq(0,1,by=.001),dbeta(seq(0,1,by=.001),10+26,10+50-26), col="blue")
points(seq(0,1,by=.001),dbeta(seq(0,1,by=.001),10+8,10-8+10), col="green")
points(seq(0,1,by=.001),dbeta(seq(0,1,by=.001),10+1,10-1+1), col="red")
points(seq(0,1,by=.001),dbeta(seq(0,1,by=.001),10,10), col="black")
a1<-2
b1<-4
a2<-4
b2<-2
n100<-.5*dbeta(seq(0,1,by=.001),a1+53,b1+100-53)+.5*dbeta(seq(0,1,by=.001),a2+53,b2+100-53)
n50<-.5*dbeta(seq(0,1,by=.001),a1+26,b1+50-26)+.5*dbeta(seq(0,1,by=.001),a2+26,b2+50-26)
n10<-.5*dbeta(seq(0,1,by=.001),a1+8,b1+10-8)+.5*dbeta(seq(0,1,by=.001),a2+8,b2+10-8)
n1<-.5*dbeta(seq(0,1,by=.001),a1+1,b1+1-1)+.5*dbeta(seq(0,1,by=.001),a2+1,b2+1-1)
plot(seq(0,1,by=.001),n100, col="purple", xlab="proportion of heads", ylab="density")
points(seq(0,1,by=.001),n50, col="blue")
points(seq(0,1,by=.001),n10,10+8,10-8+10), col="green")
points(seq(0,1,by=.001),n1, col="red")
points(seq(0,1,by=.001),.5*dbeta(seq(0,1,by=.001),a1,b1)+.5*dbeta(seq(0,1,by=.001),a2,b2), col="black")
a1<-2
b1<-4
a2<-4
b2<-2
n100<-.5*dbeta(seq(0,1,by=.001),a1+53,b1+100-53)+.5*dbeta(seq(0,1,by=.001),a2+53,b2+100-53)
n50<-.5*dbeta(seq(0,1,by=.001),a1+26,b1+50-26)+.5*dbeta(seq(0,1,by=.001),a2+26,b2+50-26)
n10<-.5*dbeta(seq(0,1,by=.001),a1+8,b1+10-8)+.5*dbeta(seq(0,1,by=.001),a2+8,b2+10-8)
n1<-.5*dbeta(seq(0,1,by=.001),a1+1,b1+1-1)+.5*dbeta(seq(0,1,by=.001),a2+1,b2+1-1)
plot(seq(0,1,by=.001),n100, col="purple", xlab="proportion of heads", ylab="density")
points(seq(0,1,by=.001),n50, col="blue")
points(seq(0,1,by=.001),n10, col="green")
points(seq(0,1,by=.001),n1, col="red")
points(seq(0,1,by=.001),.5*dbeta(seq(0,1,by=.001),a1,b1)+.5*dbeta(seq(0,1,by=.001),a2,b2), col="black")
pred<-function(n,k){
f<-function(x){x^(k+10-1)*(1-x)^(n-k+10-1)}
val<-integrate(f, lower=0, upper=1)[1]$value*gamma(k+10+n-k+10)*(1/gamma(n-k+10))*(1/gamma(k+10))
return val
}
pred<-function(n,k){
f<-function(x){x^(k+10-1)*(1-x)^(n-k+10-1)}
val<-integrate(f, lower=0, upper=1)[1]$value*gamma(k+10+n-k+10)*(1/gamma(n-k+10))*(1/gamma(k+10))
return(val)
}
pred(100,53)
pred<-function(n,k){
f<-function(x){x^(k+10-1)*(1-x)^(n-k+10)}
val<-integrate(f, lower=0, upper=1)[1]$value*gamma(k+10+n-k+10)*(1/gamma(n-k+10))*(1/gamma(k+10))
return(val)
}
pred(100,53)
pred(1,1)
pred(10,8)
pred(50,26)
pred24<-function(n,k){
f<-function(x){x^(k+2-1)*(1-x)^(n-k+4)}
val<-integrate(f, lower=0, upper=1)[1]$value*gamma(k+2+n-k+4)*(1/gamma(n-k+4))*(1/gamma(k+2))
return(val)
}
pred42<-function(n,k){
f<-function(x){x^(k+4-1)*(1-x)^(n-k+2)}
val<-integrate(f, lower=0, upper=1)[1]$value*gamma(k+2+n-k+4)*(1/gamma(n-k+2))*(1/gamma(k+4))
return(val)
}
.5*pred24(1,1)+.5*pred42(1,1)
.5*pred24(10,8)+.5*pred42(10,8)
.5*pred24(50,26)+.5*pred42(50,26)
.5*pred24(100,53)+.5*pred42(100,53)
source('~/GitHub/RSA-normalization-values/get_population_cut_offs.r')
source('~/GitHub/RSA-normalization-values/getMeanSA.r')
source('~/GitHub/RSA-normalization-values/CorrelationTableNewScales.R')
AA
Aa
NormTable<- data.frame(AminoAcid=AA, Theoretical=NormValues$max_theo_97, Empirical=NormValues$max_emp_97)
NormTable
source('~/GitHub/RSA-normalization-values/get_population_cut_offs.r')
source('~/GitHub/RSA-normalization-values/getMeanSA.r')
source('~/GitHub/RSA-normalization-values/CorrelationTableNewScales.R')
NormTable<- data.frame(AminoAcid=AA, Theoretical=NormValues$max_theo_97, Empirical=NormValues$max_emp_97)
NormValues
NormTable
C_table
source('~/.active-rstudio-document')
source('~/GitHub/RSA-normalization-values/CorrelationTableNewScales.R')
source('~/.active-rstudio-document')
source('~/GitHub/RSA-normalization-values/CorrelationTableNewScales.R')
C_table
C_table
Fig_Scales<-Scales<-data.frame(AminoAcid=AA,
meanTheo=meanTheo,
meanEmp=meanEmp,
ScaleFrac=ScaleFrac,
ScaleFrac95= ScaleFrac95)
Fig_Scales
write.table(Scales, file="Hydrophobicity_Scales_updated_Figures.txt",quote=FALSE, row.names=FALSE, sep='\t')
setwd("~/GitHub/RSA-normalization-values/GeoFiles/ALLOWED/")
d<-read.delim("Ala_ALLOWED_geo")
max(d$SA)
names(d)
d$SA
d
d<-read.delim("Ala_ALLOWED_geo")
d$SA
max(d$SA)
ala<- d[unlist(d$SA==max(d$SA)),]
ala
ala$psi*180.0/pi
ala$phi*180.0/pi
code<-"Ala"
setwd("~/GitHub/RSA-normalization-values/GeoFiles/ALLOWED/")
f_all<-paste(code, "_ALLOWED_geo", sep='')
d<-read.delim(f_all)
hist(d$SA/128.0)
hist(d$SA/128.0)
setwd("~/GitHub/RSA-normalization-values/AnglesIteratedThroughAgain/ALLOWED/")
theo<-read.delim("AnglesIteratedThroughAgain_ALLOWED_ALA")
ala_theo<- theo[unlist(theo$SA==max(theo$SA)),]
ala_theo$Psi*180.0/pi
ala_theo$Psi
ala_theo$Phi
max(theo$SA)
setwd("~/GitHub/RSA-normalization-values/AllBins")
f_all<-read.delim("Ala_max_bins_all")
d<-read.delim(f_all)
d<-read.delim("Ala_max_bins_all")
counter<-1
dtemp<- d[unlist(d$obs_bin_pop> counter),]
while( sum(dtemp$obs_bin_pop)/sum(d$obs_bin_pop) > .97 ){
counter<- counter+1
dtemp<- d[unlist(d$obs_bin_pop> counter),]
}
counter
dtemp<- d[unlist(d$obs_bin_pop> counter),]
sum(dtemp$obs_bin_pop)/sum(d$obs_bin_pop)
counter<- counter-1
dtemp<- d[unlist(d$obs_bin_pop> counter),]
sum(dtemp$obs_bin_pop)/sum(d$obs_bin_pop)
max(dtemp$max_theo_SA)
counter
source('~/GitHub/RSA-normalization-values/get_population_cut_offs.r')
source('~/GitHub/RSA-normalization-values/getMeanSA.r')
source('~/GitHub/RSA-normalization-values/CorrelationTableNewScales.R')
source('~/GitHub/RSA-normalization-values/CorrelationTableNewScales.R')
Scales<-data.frame(AminoAcid=AA, meanEmp=meanEmp, medianEmp=medianEmp,
meanEmpSqrt=meanEmpSqrt, meanEmpBC= meanEmpBC, meanTheo=meanTheo,
medianTheo=medianTheo, meanTheoSqrt=meanTheoSqrt, meanTheoBC= meanTheoBC,
ScaleFrac=ScaleFrac, ScaleFrac95= ScaleFrac95)
write.table(Scales, file="Hydrophobicity_Scales_updated.txt",quote=FALSE, row.names=FALSE, sep='\t')
source('~/GitHub/RSA-normalization-values/CorrelationTableNewScales.R')
setwd("~/GitHub/RSA-normalization-values/GeoFiles/ALLOWED/")
emp<-read.delim("Ala_ALLOWED_geo")
ala_emp<- emp[unlist(emp$SA==max(emp$SA)),]
max(emp$SA)
ala_emp$psi*180.0/pi
ala_emp$phi*180.0/pi
setwd("~/GitHub/RSA-normalization-values/AnglesIteratedThroughAgain/ALLOWED/")
theo<-read.delim("AnglesIteratedThroughAgain_ALLOWED_ALA")
ala_theo<- theo[unlist(theo$SA==max(theo$SA)),]
max(theo$SA)
setwd("~/GitHub/RSA-normalization-values/AllBins")
d<-read.delim("Ala_max_bins_all")
counter<-1
dtemp<- d[unlist(d$obs_bin_pop> counter),]
while( sum(dtemp$obs_bin_pop)/sum(d$obs_bin_pop) > .97 ){
counter<- counter+1
dtemp<- d[unlist(d$obs_bin_pop> counter),]
}
max(dtemp$max_theo_SA)
dtemp<- d[unlist(d$obs_bin_pop> counter),]
counter<- counter-1
dtemp<- d[unlist(d$obs_bin_pop> counter),]
max(dtemp$max_theo_SA)
length(dtemp$max_theo_SA)
dem<-dtemp[unlist(dtemp$max_theo_SA>=max(dtemp$max_theo_SA),]
dem<-dtemp[unlist( dtemp$max_theo_SA >= max(dtemp$max_theo_SA)),]
dem
setwd("~/GitHub/RSA-normalization-values/AnglesIteratedThroughAgain/ALLOWED/")
theo<-read.delim("AnglesIteratedThroughAgain_ALLOWED_ALA")
ala_theo<- theo[unlist(theo$SA==max(theo$SA)),]
ala_theo
source('~/GitHub/RSA-normalization-values/get_population_cut_offs.r')
source('~/GitHub/RSA-normalization-values/get_population_cut_offs.r')
source('~/GitHub/RSA-normalization-values/getMeanSA.r')
source('~/GitHub/RSA-normalization-values/CorrelationTableNewScales.R')
Scales
Scales<-data.frame(AminoAcid=AA, meanEmp=meanEmp, medianEmp=medianEmp,
meanEmpSqrt=meanEmpSqrt, meanEmpBC= meanEmpBC, meanTheo=meanTheo,
medianTheo=medianTheo, meanTheoSqrt=meanTheoSqrt, meanTheoBC= meanTheoBC,
ScaleFrac=ScaleFrac, ScaleFrac95= ScaleFrac95)
write.table(Scales, file="Hydrophobicity_Scales_updated.txt",quote=FALSE, row.names=FALSE, sep='\t')
source('~/GitHub/RSA-normalization-values/CorrelationTableNewScales.R')
